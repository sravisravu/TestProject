package org.talend.designer.codegen.translators.orchestration;

import org.talend.core.model.process.INode;
import org.talend.core.model.process.ElementParameterParser;
import org.talend.core.model.process.IConnection;
import org.talend.designer.codegen.config.CodeGeneratorArgument;
import org.talend.core.model.process.EConnectionType;
import java.util.ArrayList;
import java.util.List;

public class TPartitionerEndJava
{
  protected static String nl;
  public static synchronized TPartitionerEndJava create(String lineSeparator)
  {
    nl = lineSeparator;
    TPartitionerEndJava result = new TPartitionerEndJava();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "\tboolean forceShutdown_";
  protected final String TEXT_2 = " = false;" + NL + "\t" + NL + "    for (int i_";
  protected final String TEXT_3 = " = 0; i_";
  protected final String TEXT_4 = " < ";
  protected final String TEXT_5 = "; i_";
  protected final String TEXT_6 = "++) {" + NL + "       tasks_";
  protected final String TEXT_7 = ".get(i_";
  protected final String TEXT_8 = ").makeFinished();" + NL + "       if (tasks_";
  protected final String TEXT_9 = ".get(i_";
  protected final String TEXT_10 = ").getMap().get(\"HAS_ERROR\") != null) {" + NL + "       \t\tforceShutdown_";
  protected final String TEXT_11 = " = true;" + NL + "       \t\tthrow new RuntimeException(\"Exception: \", (Exception)tasks_";
  protected final String TEXT_12 = ".get(i_";
  protected final String TEXT_13 = ").getMap().get(\"HAS_ERROR\"));" + NL + "       }" + NL + "       if (tasks_";
  protected final String TEXT_14 = ".get(i_";
  protected final String TEXT_15 = ").getMap().get(\"THREADS_HAVE_ERROR\") != null) {" + NL + "       \t\tforceShutdown_";
  protected final String TEXT_16 = " = true;" + NL + "       \t\tglobalMap.put(\"FORCE_SHUTDOWN\",Boolean.TRUE);" + NL + "       \t\tthrow new RuntimeException(\"Exception\", (Exception)tasks_";
  protected final String TEXT_17 = ".get(i_";
  protected final String TEXT_18 = ").getMap().get(\"THREADS_HAVE_ERROR\"));" + NL + "       }" + NL + "    }" + NL + "    " + NL + "    for (int i_";
  protected final String TEXT_19 = " = 0; i_";
  protected final String TEXT_20 = " < es_";
  protected final String TEXT_21 = ".size(); i_";
  protected final String TEXT_22 = "++) {" + NL + "    \ttry {" + NL + "       \t\tObject tmp_";
  protected final String TEXT_23 = " = es_";
  protected final String TEXT_24 = ".take().get();//don't need it for anything, hard return null." + NL + "       \t} catch (Exception ex_";
  protected final String TEXT_25 = ") {" + NL + "\t\t\tThrowable e_";
  protected final String TEXT_26 = " = ex_";
  protected final String TEXT_27 = ";" + NL + "\t\t\t// find the origin cause of the exception" + NL + "\t\t\tfor (int j_";
  protected final String TEXT_28 = " = 0; j_";
  protected final String TEXT_29 = " < 100 && e_";
  protected final String TEXT_30 = "!=null; j_";
  protected final String TEXT_31 = "++) {" + NL + "\t\t\t\tif (e_";
  protected final String TEXT_32 = ".getCause() == null) {" + NL + "\t\t\t\t\tbreak;" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\te_";
  protected final String TEXT_33 = " = e_";
  protected final String TEXT_34 = ".getCause();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tif (e_";
  protected final String TEXT_35 = " instanceof Exception) {" + NL + "\t\t\t\tthrow (Exception)e_";
  protected final String TEXT_36 = ";" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthrow ex_";
  protected final String TEXT_37 = ";" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "    for (int i_";
  protected final String TEXT_38 = " = 0; i_";
  protected final String TEXT_39 = " < es_";
  protected final String TEXT_40 = ".size(); i_";
  protected final String TEXT_41 = "++) {" + NL + "       \tif (tasks_";
  protected final String TEXT_42 = ".get(i_";
  protected final String TEXT_43 = ").getMap().get(\"HAS_ERROR\") != null) {" + NL + "       \t\tforceShutdown_";
  protected final String TEXT_44 = " = true;" + NL + "       \t\tthrow new RuntimeException(\"Exception\", (Exception)tasks_";
  protected final String TEXT_45 = ".get(i_";
  protected final String TEXT_46 = ").getMap().get(\"HAS_ERROR\"));" + NL + "       \t}" + NL + "       \tif (tasks_";
  protected final String TEXT_47 = ".get(i_";
  protected final String TEXT_48 = ").getMap().get(\"THREADS_HAVE_ERROR\") != null) {" + NL + "       \t\tforceShutdown_";
  protected final String TEXT_49 = " = true;" + NL + "       \t\tglobalMap.put(\"FORCE_SHUTDOWN\",Boolean.TRUE);" + NL + "       \t\tthrow new RuntimeException(\"Exception\", (Exception)tasks_";
  protected final String TEXT_50 = ".get(i_";
  protected final String TEXT_51 = ").getMap().get(\"THREADS_HAVE_ERROR\"));" + NL + "      \t}" + NL + "      \tjava.util.Map<String, Object> tmpMap = tasks_";
  protected final String TEXT_52 = ".get(i_";
  protected final String TEXT_53 = ").getMap();" + NL + "       \tjava.util.Set<String> mapKeys_";
  protected final String TEXT_54 = " = tmpMap.keySet();" + NL + "       \tfor (String key_";
  protected final String TEXT_55 = " : mapKeys_";
  protected final String TEXT_56 = ") {" + NL + "       \t\tif (globalMap.get(key_";
  protected final String TEXT_57 = ") == null) {" + NL + "       \t\t\tglobalMap.put(key_";
  protected final String TEXT_58 = ",tmpMap.get(key_";
  protected final String TEXT_59 = "));" + NL + "       \t\t} else if (key_";
  protected final String TEXT_60 = ".endsWith(\"NB_LINE\")) {" + NL + "       \t\t\tInteger val_";
  protected final String TEXT_61 = " = (Integer)tmpMap.get(key_";
  protected final String TEXT_62 = ");" + NL + "       \t\t\tInteger mval_";
  protected final String TEXT_63 = " = (Integer)globalMap.get(key_";
  protected final String TEXT_64 = ");" + NL + "       \t\t\tglobalMap.put(key_";
  protected final String TEXT_65 = ",val_";
  protected final String TEXT_66 = "+mval_";
  protected final String TEXT_67 = ");" + NL + "       \t\t}" + NL + "       \t}" + NL + "    }" + NL + "    if (forceShutdown_";
  protected final String TEXT_68 = ") {" + NL + "\t    for (java.util.concurrent.Future<Object> f : futures_";
  protected final String TEXT_69 = ") {" + NL + "\t    \tf.cancel(true);" + NL + "\t    }" + NL + "\t    rootEs_";
  protected final String TEXT_70 = ".shutdownNow();" + NL + "    }else{" + NL + "    \trootEs_";
  protected final String TEXT_71 = ".shutdown();" + NL + "    }" + NL + "\tresourceMap.put(\"finish_";
  protected final String TEXT_72 = "\", true); ";
  protected final String TEXT_73 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();	
    String numPartitions = ElementParameterParser.getValue(node, "__NUM_PARTITIONS__");
    String destinationColl = null;
	int recollTaskCount = 0;
    List<? extends INode> listRecoll= node.getProcess().getNodesOfType("tRecollector");
	if (listRecoll!=null && listRecoll.size() > 0 ) {
		recollTaskCount = listRecoll.size();
	}
   	boolean startRecollector = false;
    List<String> recs = new ArrayList<String>();
    List<? extends IConnection> startsConns = node.getOutgoingConnections(EConnectionType.STARTS);
    for (int i = 0; i < startsConns.size(); i++) {
    	IConnection conn = startsConns.get(i);
    	INode target = conn.getTarget();
    	if (target.getUniqueName().startsWith("tCollector") && destinationColl == null) {
    		destinationColl = target.getUniqueName();
    	} else if (target.getUniqueName().startsWith("tRecollector")) {
    		startRecollector = true;
    		recs.add(target.getUniqueName());
    	}
    }
    boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));

    stringBuffer.append(TEXT_1);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_2);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_3);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(numPartitions);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_6);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_7);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_8);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_9);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_10);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_11);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_12);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_13);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_14);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_15);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_16);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_17);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_18);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_19);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_20);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_21);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_22);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_23);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_24);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_25);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_26);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_27);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_28);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_29);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_30);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_31);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_32);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_33);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_34);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_35);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_36);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_37);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_38);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_39);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_40);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_41);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_42);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_43);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_44);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_45);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_46);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_47);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_48);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_49);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_50);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_51);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_52);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_53);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_54);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_55);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_56);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_57);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_58);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_59);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_60);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_61);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_62);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_63);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_64);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_65);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_66);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_67);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_68);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_69);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_70);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_71);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_72);
    stringBuffer.append(TEXT_73);
    return stringBuffer.toString();
  }
}
