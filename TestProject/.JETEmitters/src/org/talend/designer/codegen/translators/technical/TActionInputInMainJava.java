package org.talend.designer.codegen.translators.technical;

import java.util.List;
import org.talend.core.model.process.INode;
import org.talend.core.model.process.IConnection;
import org.talend.core.model.process.IConnectionCategory;
import org.talend.core.model.metadata.IMetadataColumn;
import org.talend.core.model.metadata.IMetadataTable;
import org.talend.core.model.metadata.types.JavaType;
import org.talend.core.model.metadata.types.JavaTypesManager;
import org.talend.designer.codegen.config.CodeGeneratorArgument;

public class TActionInputInMainJava
{
  protected static String nl;
  public static synchronized TActionInputInMainJava create(String lineSeparator)
  {
    nl = lineSeparator;
    TActionInputInMainJava result = new TActionInputInMainJava();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "\t\t\t\tObject ";
  protected final String TEXT_2 = " = map_";
  protected final String TEXT_3 = ".get(\"";
  protected final String TEXT_4 = "\");" + NL + "\t\t\t\tif (null != ";
  protected final String TEXT_5 = ") {";
  protected final String TEXT_6 = NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_7 = " instanceof Number) {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_8 = ".";
  protected final String TEXT_9 = " = ((java.lang.Number) ";
  protected final String TEXT_10 = ").byteValue();" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_11 = ".";
  protected final String TEXT_12 = " = (";
  protected final String TEXT_13 = ") ";
  protected final String TEXT_14 = ";" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_15 = NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_16 = " instanceof Number) {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_17 = ".";
  protected final String TEXT_18 = " = ((java.lang.Number) ";
  protected final String TEXT_19 = ").shortValue();" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_20 = ".";
  protected final String TEXT_21 = " = (";
  protected final String TEXT_22 = ") ";
  protected final String TEXT_23 = ";" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_24 = NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_25 = " instanceof Number) {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_26 = ".";
  protected final String TEXT_27 = " = ((java.lang.Number) ";
  protected final String TEXT_28 = ").intValue();" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_29 = ".";
  protected final String TEXT_30 = " = (";
  protected final String TEXT_31 = ") ";
  protected final String TEXT_32 = ";" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_33 = NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_34 = " instanceof Number) {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_35 = ".";
  protected final String TEXT_36 = " = ((java.lang.Number) ";
  protected final String TEXT_37 = ").floatValue();" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_38 = ".";
  protected final String TEXT_39 = " = (";
  protected final String TEXT_40 = ") ";
  protected final String TEXT_41 = ";" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_42 = NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_43 = " instanceof Number) {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_44 = ".";
  protected final String TEXT_45 = " = ((java.lang.Number) ";
  protected final String TEXT_46 = ").doubleValue();" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_47 = ".";
  protected final String TEXT_48 = " = (";
  protected final String TEXT_49 = ") ";
  protected final String TEXT_50 = ";" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_51 = NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_52 = " instanceof Number) {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_53 = ".";
  protected final String TEXT_54 = " = ((java.lang.Number) ";
  protected final String TEXT_55 = ").longValue();" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_56 = ".";
  protected final String TEXT_57 = " = (";
  protected final String TEXT_58 = ") ";
  protected final String TEXT_59 = ";" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_60 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_61 = ".";
  protected final String TEXT_62 = " = (";
  protected final String TEXT_63 = ") ";
  protected final String TEXT_64 = ";";
  protected final String TEXT_65 = NL + "\t\t\t\t} else {";
  protected final String TEXT_66 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_67 = ".";
  protected final String TEXT_68 = " = 0;";
  protected final String TEXT_69 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_70 = ".";
  protected final String TEXT_71 = " = 0L;";
  protected final String TEXT_72 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_73 = ".";
  protected final String TEXT_74 = " = 0.0f;";
  protected final String TEXT_75 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_76 = ".";
  protected final String TEXT_77 = " = 0.0d;";
  protected final String TEXT_78 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_79 = ".";
  protected final String TEXT_80 = " = false;";
  protected final String TEXT_81 = NL + "\t\t\t\t\t\t";
  protected final String TEXT_82 = ".";
  protected final String TEXT_83 = " = '\\u0000';";
  protected final String TEXT_84 = NL + "\t\t\t\t}" + NL;
  protected final String TEXT_85 = NL + "\t\t\t\troutines.system.Dynamic dynamic_";
  protected final String TEXT_86 = " = new routines.system.Dynamic();" + NL + "\t\t\t\tdynamic_";
  protected final String TEXT_87 = ".clearColumnValues();" + NL + "\t\t\t\tif (dynamic_map_";
  protected final String TEXT_88 = " != null) {" + NL + "\t\t\t\t\tjava.util.Iterator<java.util.Map.Entry<IPaasField, Object>> dynamicIterator_";
  protected final String TEXT_89 = " = dynamic_map_";
  protected final String TEXT_90 = ".entrySet().iterator();" + NL + "\t\t\t\t\tint ind_";
  protected final String TEXT_91 = " = 0;" + NL + "\t\t\t\t\twhile (dynamicIterator_";
  protected final String TEXT_92 = ".hasNext()) {" + NL + "\t\t\t\t\t\tjava.util.Map.Entry<IPaasField, Object> entry_";
  protected final String TEXT_93 = " = dynamicIterator_";
  protected final String TEXT_94 = ".next();" + NL + "\t\t\t\t\t\tIPaasField ipaasField_";
  protected final String TEXT_95 = " = entry_";
  protected final String TEXT_96 = ".getKey();" + NL + "\t\t\t\t\t\troutines.system.DynamicMetadata dynamicMetadata_";
  protected final String TEXT_97 = " = new routines.system.DynamicMetadata();" + NL + "\t\t\t\t\t\tdynamicMetadata_";
  protected final String TEXT_98 = ".setName(ipaasField_";
  protected final String TEXT_99 = ".getName().replaceAll(\"[ .-]+\", \"_\"));" + NL + "\t\t\t\t\t\tdynamicMetadata_";
  protected final String TEXT_100 = ".setDbName(dynamicMetadata_";
  protected final String TEXT_101 = ".getName());" + NL + "\t\t\t\t\t\tdynamicMetadata_";
  protected final String TEXT_102 = ".setType(ipaasField_";
  protected final String TEXT_103 = ".getType() == null ? \"id_String\" : ipaasField_";
  protected final String TEXT_104 = ".getType());" + NL + "\t\t\t\t\t\tdynamicMetadata_";
  protected final String TEXT_105 = ".setDbType(\"VARCHAR\");" + NL + "\t\t\t\t\t\tdynamicMetadata_";
  protected final String TEXT_106 = ".setLength(ipaasField_";
  protected final String TEXT_107 = ".getLength() > 0 ? ipaasField_";
  protected final String TEXT_108 = ".getLength() : 100);" + NL + "\t\t\t\t\t\tdynamicMetadata_";
  protected final String TEXT_109 = ".setPrecision(0);" + NL + "\t\t\t\t\t\tdynamicMetadata_";
  protected final String TEXT_110 = ".setNullable(true);" + NL + "\t\t\t\t\t\tdynamicMetadata_";
  protected final String TEXT_111 = ".setKey(false);" + NL + "\t\t\t\t\t\t//TODO Handle source type" + NL + "\t\t\t\t\t\t//dynamicMetadata_";
  protected final String TEXT_112 = ".setSourceType(routines.system.DynamicMetadata.sourceTypes.demilitedFile);" + NL + "\t\t\t\t\t\tdynamic_";
  protected final String TEXT_113 = ".metadatas.add(dynamicMetadata_";
  protected final String TEXT_114 = ");" + NL + "\t\t\t\t\t\tdynamicMetadata_";
  protected final String TEXT_115 = ".setColumnPosition(ind_";
  protected final String TEXT_116 = ");" + NL + "\t\t\t\t\t\tdynamic_";
  protected final String TEXT_117 = ".addColumnValue(entry_";
  protected final String TEXT_118 = ".getValue());" + NL + "\t\t\t\t\t\tind_";
  protected final String TEXT_119 = "++;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_120 = ".";
  protected final String TEXT_121 = " = dynamic_";
  protected final String TEXT_122 = ";" + NL;
  protected final String TEXT_123 = NL + "\t\t\t\tObject theFieldValue_";
  protected final String TEXT_124 = " = map_";
  protected final String TEXT_125 = ".get(\"";
  protected final String TEXT_126 = "\");" + NL + "\t\t\t\tif (theFieldValue_";
  protected final String TEXT_127 = " instanceof org.dom4j.Document) {" + NL + "\t\t\t\t\troutines.system.Document doc_";
  protected final String TEXT_128 = " = new routines.system.Document();" + NL + "\t\t\t\t\tdoc_";
  protected final String TEXT_129 = ".setDocument((org.dom4j.Document) theFieldValue_";
  protected final String TEXT_130 = ");" + NL + "\t\t\t\t\t";
  protected final String TEXT_131 = ".";
  protected final String TEXT_132 = " = doc_";
  protected final String TEXT_133 = ";" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\t";
  protected final String TEXT_134 = ".";
  protected final String TEXT_135 = " = (";
  protected final String TEXT_136 = ") theFieldValue_";
  protected final String TEXT_137 = ";" + NL + "\t\t\t\t}";
  protected final String TEXT_138 = NL + "\t\t\t\t";
  protected final String TEXT_139 = ".";
  protected final String TEXT_140 = " = (";
  protected final String TEXT_141 = ") map_";
  protected final String TEXT_142 = ".get(\"";
  protected final String TEXT_143 = "\");";
  protected final String TEXT_144 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode) codeGenArgument.getArgument();
	String cid = node.getUniqueName().replaceAll("_In", "");

	List<? extends IConnection> outputConnections = node.getOutgoingSortedConnections();
	String dataOutputConnection = null;
	for (IConnection conn : outputConnections) {
		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
			dataOutputConnection = conn.getName();
			break;
		}
	}

	IMetadataTable metadata = null;
	List<IMetadataTable> metadatas = node.getMetadataList();
	if (null != metadatas && !metadatas.isEmpty()) {
		metadata = metadatas.get(0);
	}

	if (null != dataOutputConnection && null != metadata) {
		List<IMetadataColumn> columns = metadata.getListColumns();
		for (IMetadataColumn c : columns) {
			String label = c.getLabel();
			String type = JavaTypesManager.getTypeToGenerate(c.getTalendType(), c.isNullable());
			if (JavaTypesManager.isJavaPrimitiveType(type)) { 
    stringBuffer.append(TEXT_1);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_2);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_3);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_5);
    					String fallbackType = JavaTypesManager.getTypeToGenerate(c.getTalendType(), true);
					JavaType javaType = JavaTypesManager.getJavaTypeFromName(type);
					if (javaType.equals(JavaTypesManager.BYTE)) { 
    stringBuffer.append(TEXT_6);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_7);
    stringBuffer.append(dataOutputConnection);
    stringBuffer.append(TEXT_8);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_9);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_10);
    stringBuffer.append(dataOutputConnection);
    stringBuffer.append(TEXT_11);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_12);
    stringBuffer.append(fallbackType);
    stringBuffer.append(TEXT_13);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_14);
    					} else if (javaType.equals(JavaTypesManager.SHORT)) {
    stringBuffer.append(TEXT_15);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_16);
    stringBuffer.append(dataOutputConnection);
    stringBuffer.append(TEXT_17);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_18);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_19);
    stringBuffer.append(dataOutputConnection);
    stringBuffer.append(TEXT_20);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_21);
    stringBuffer.append(fallbackType);
    stringBuffer.append(TEXT_22);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_23);
    					} else if (javaType.equals(JavaTypesManager.INTEGER)) {
    stringBuffer.append(TEXT_24);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_25);
    stringBuffer.append(dataOutputConnection);
    stringBuffer.append(TEXT_26);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_27);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_28);
    stringBuffer.append(dataOutputConnection);
    stringBuffer.append(TEXT_29);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_30);
    stringBuffer.append(fallbackType);
    stringBuffer.append(TEXT_31);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_32);
    					} else if (javaType.equals(JavaTypesManager.FLOAT)) {
    stringBuffer.append(TEXT_33);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_34);
    stringBuffer.append(dataOutputConnection);
    stringBuffer.append(TEXT_35);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_36);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_37);
    stringBuffer.append(dataOutputConnection);
    stringBuffer.append(TEXT_38);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_39);
    stringBuffer.append(fallbackType);
    stringBuffer.append(TEXT_40);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_41);
    					} else if (javaType.equals(JavaTypesManager.DOUBLE)) {
    stringBuffer.append(TEXT_42);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_43);
    stringBuffer.append(dataOutputConnection);
    stringBuffer.append(TEXT_44);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_45);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_46);
    stringBuffer.append(dataOutputConnection);
    stringBuffer.append(TEXT_47);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_48);
    stringBuffer.append(fallbackType);
    stringBuffer.append(TEXT_49);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_50);
    					} else if (javaType.equals(JavaTypesManager.LONG)) {
    stringBuffer.append(TEXT_51);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_52);
    stringBuffer.append(dataOutputConnection);
    stringBuffer.append(TEXT_53);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_54);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_55);
    stringBuffer.append(dataOutputConnection);
    stringBuffer.append(TEXT_56);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_57);
    stringBuffer.append(fallbackType);
    stringBuffer.append(TEXT_58);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_59);
    					} else { 
    stringBuffer.append(TEXT_60);
    stringBuffer.append(dataOutputConnection);
    stringBuffer.append(TEXT_61);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_62);
    stringBuffer.append(fallbackType);
    stringBuffer.append(TEXT_63);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_64);
    					} 
    stringBuffer.append(TEXT_65);
    					if (javaType.equals(JavaTypesManager.BYTE) || javaType.equals(JavaTypesManager.SHORT) || javaType.equals(JavaTypesManager.INTEGER)) {
    stringBuffer.append(TEXT_66);
    stringBuffer.append(dataOutputConnection);
    stringBuffer.append(TEXT_67);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_68);
    					} else if (javaType.equals(JavaTypesManager.LONG)) { 
    stringBuffer.append(TEXT_69);
    stringBuffer.append(dataOutputConnection);
    stringBuffer.append(TEXT_70);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_71);
    					} else if (javaType.equals(JavaTypesManager.FLOAT)) { 
    stringBuffer.append(TEXT_72);
    stringBuffer.append(dataOutputConnection);
    stringBuffer.append(TEXT_73);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_74);
    					} else if (javaType.equals(JavaTypesManager.DOUBLE)) { 
    stringBuffer.append(TEXT_75);
    stringBuffer.append(dataOutputConnection);
    stringBuffer.append(TEXT_76);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_77);
    					} else if (javaType.equals(JavaTypesManager.BOOLEAN)) { 
    stringBuffer.append(TEXT_78);
    stringBuffer.append(dataOutputConnection);
    stringBuffer.append(TEXT_79);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_80);
    					} else if (javaType.equals(JavaTypesManager.CHARACTER)) { 
    stringBuffer.append(TEXT_81);
    stringBuffer.append(dataOutputConnection);
    stringBuffer.append(TEXT_82);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_83);
    					}
    stringBuffer.append(TEXT_84);
    			} else if ("Dynamic".equals(type)) { 
    stringBuffer.append(TEXT_85);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_86);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_87);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_88);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_89);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_90);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_91);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_92);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_93);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_94);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_95);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_96);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_97);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_98);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_99);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_100);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_101);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_102);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_103);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_104);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_105);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_106);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_107);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_108);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_109);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_110);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_111);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_112);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_113);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_114);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_115);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_116);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_117);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_118);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_119);
    stringBuffer.append(dataOutputConnection);
    stringBuffer.append(TEXT_120);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_121);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_122);
    			} else if ("Document".equals(type)) { 
    stringBuffer.append(TEXT_123);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_124);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_125);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_126);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_127);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_128);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_129);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_130);
    stringBuffer.append(dataOutputConnection);
    stringBuffer.append(TEXT_131);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_132);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_133);
    stringBuffer.append(dataOutputConnection);
    stringBuffer.append(TEXT_134);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_135);
    stringBuffer.append(type);
    stringBuffer.append(TEXT_136);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_137);
    			} else {
    stringBuffer.append(TEXT_138);
    stringBuffer.append(dataOutputConnection);
    stringBuffer.append(TEXT_139);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_140);
    stringBuffer.append(type);
    stringBuffer.append(TEXT_141);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_142);
    stringBuffer.append(label);
    stringBuffer.append(TEXT_143);
    			}
		}
	}

    stringBuffer.append(TEXT_144);
    return stringBuffer.toString();
  }
}
